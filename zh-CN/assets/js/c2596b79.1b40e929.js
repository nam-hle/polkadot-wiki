(self.webpackChunk=self.webpackChunk||[]).push([[3900],{3905:(e,t,a)=>{"use strict";a.d(t,{Zo:()=>d,kt:()=>h});var r=a(67294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},o=Object.keys(e);for(r=0;r<o.length;r++)a=o[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)a=o[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var s=r.createContext({}),c=function(e){var t=r.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},d=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,o=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),u=c(a),h=n,m=u["".concat(s,".").concat(h)]||u[h]||p[h]||o;return a?r.createElement(m,i(i({ref:t},d),{},{components:a})):r.createElement(m,i({ref:t},d))}));function h(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=a.length,i=new Array(o);i[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:n,i[1]=l;for(var c=2;c<o;c++)i[c]=a[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,a)}u.displayName="MDXCreateElement"},89713:(e,t,a)=>{"use strict";a.r(t),a.d(t,{frontMatter:()=>i,metadata:()=>l,toc:()=>s,default:()=>d});var r=a(22122),n=a(19756),o=(a(67294),a(3905)),i={id:"learn-spree",title:"SPREE",sidebar_label:"SPREE"},l={unversionedId:"learn-spree",id:"learn-spree",isDocsHomePage:!1,title:"SPREE",description:'Shared Protected Runtime Execution Enclaves (SPREE) sometimes referred to as "trust wormholes," are fragments of logic comparable to runtime modules in Substrate, but live on the Polkadot Relay Chain and may be opted into by parachains.',source:"@site/i18n/zh-CN/docusaurus-plugin-content-docs/current/learn-spree.md",sourceDirName:".",slug:"/learn-spree",permalink:"/polkadot-wiki/zh-CN/docs/learn-spree",editUrl:"https://github.com/w3f/polkadot-wiki/edit/master/docs/learn-spree.md",version:"current",sidebar_label:"SPREE",frontMatter:{id:"learn-spree",title:"SPREE",sidebar_label:"SPREE"},sidebar:"docs",previous:{title:"\u8de8\u94fe\u6d88\u606f\u4f20\u9012 (XCMP)",permalink:"/polkadot-wiki/zh-CN/docs/learn-crosschain"},next:{title:"WebAssembly (Wasm)",permalink:"/polkadot-wiki/zh-CN/docs/learn-wasm"}},s=[{value:"\u8d77\u6e90",id:"\u8d77\u6e90",children:[]},{value:"\u4ec0\u4e48\u662f SPREE \u6a21\u5757\uff1f",id:"\u4ec0\u4e48\u662f-spree-\u6a21\u5757\uff1f",children:[]},{value:"\u4e3a\u4ec0\u4e48?",id:"\u4e3a\u4ec0\u4e48",children:[]},{value:"\u4f8b\u5b50",id:"\u4f8b\u5b50",children:[]}],c={toc:s};function d(e){var t=e.components,i=(0,n.Z)(e,["components"]);return(0,o.kt)("wrapper",(0,r.Z)({},c,i,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,'Shared Protected Runtime Execution Enclaves (SPREE) sometimes referred to as "trust wormholes," are fragments of logic comparable to runtime modules in Substrate, but live on the Polkadot Relay Chain and may be opted into by parachains.'),(0,o.kt)("p",null,"SPREE \u7b80\u8981\u5730\u63cf\u8ff0\u4e86\u4ee5\u4e0b\u5c5e\u6027\u548c\u529f\u80fd\uff1a"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"\u5e73\u884c\u94fe\u53ef\u4ee5\u9009\u62e9\u52a0\u5165\u7279\u6b8a\u7684 Runtime \u903b\u8f91\uff08\u4f8b\u5982\u667a\u80fd\u5408\u7ea6\uff09\u3002"),(0,o.kt)("li",{parentName:"ul"},"\u8fd9\u4e9b\u788e\u7247\u6709\u81ea\u5df1\u7684\u5b58\u50a8\u7a7a\u95f4\u548c\u81ea\u5df1\u7684 ",(0,o.kt)("a",{parentName:"li",href:"learn-crosschain"},"XCMP")," \u7aef\u70b9\u3002"),(0,o.kt)("li",{parentName:"ul"},"\u8de8\u94fe\u7684\u6240\u6709\u5b9e\u4f8b\u5177\u6709\u76f8\u540c\u7684\u903b\u8f91\u3002"),(0,o.kt)("li",{parentName:"ul"},"It executes alongside parachain logic."),(0,o.kt)("li",{parentName:"ul"},"\u53d7\u4fdd\u62a4\uff1a\u5b58\u50a8\u4e0d\u80fd\u901a\u8fc7\u5e73\u884c\u94fe\u903b\u8f91\u66f4\u6539\uff0c\u6d88\u606f\u4e0d\u80fd\u88ab\u5e73\u884c\u94fe\u4f2a\u9020\u3002")),(0,o.kt)("h2",{id:"\u8d77\u6e90"},"\u8d77\u6e90"),(0,o.kt)("p",null,"On 28 March, 2019 u/Tawaren, a member of the Polkadot community, made a post on ",(0,o.kt)("a",{parentName:"p",href:"https://www.reddit.com/r/dot/"},"r/dot"),' called "SmartProtocols Idea" and laid out a proposal for ',(0,o.kt)("a",{parentName:"p",href:"https://www.reddit.com/r/dot/comments/b6kljn/smartprotocols_idea/"},"Smart Protocols"),". The core insight of the post was that XCMP had a complication in that it was difficult to verify and prove code was executed on a parachain without trust. A solution was to install the SmartProtocols in the Relay Chain that would be isolated blobs of code with their own storage per instance that could only be changed through an interface with each parachain. SmartProtocols are the precursor to SPREE."),(0,o.kt)("h2",{id:"\u4ec0\u4e48\u662f-spree-\u6a21\u5757\uff1f"},"\u4ec0\u4e48\u662f SPREE \u6a21\u5757\uff1f"),(0,o.kt)("p",null,"SPREE modules are fragments of logic (in concrete terms they are blobs of ",(0,o.kt)("a",{parentName:"p",href:"learn-wasm"},"WebAssembly")," code) that are uploaded onto Polkadot through a governance mechanism or by parachains. Once the blob is uploaded to Polkadot, all other parachains can decide to opt-in to the logic. The SPREE module would retain its own storage independent of the parachain, but would be callable through an interface with the parachain. Parachains will send messages to the SPREE module synchronously."),(0,o.kt)("p",null,"SPREE \u6a21\u5757\u5bf9\u6574\u4e2a XCMP \u7ed3\u6784\u975e\u5e38\u91cd\u8981\uff0c\u56e0\u4e3a\u5b83\u4e3a\u5c06\u5728\u76ee\u6807\u5e73\u884c\u94fe\u4e0a\u6267\u884c\u3002\u867d\u7136 XCMP \u4fdd\u8bc1\u6d88\u606f\u7684\u4f20\u9012\uff0c\u4f46\u5b83\u4e0d\u4fdd\u8bc1\u4ec0\u4e48\u4ee3\u7801\u5c06\u6267\u884c\uff0c\u5373\u63a5\u6536\u5e73\u884c\u94fe\u5c06\u5982\u4f55\u89e3\u91ca\u6d88\u606f\u3002XCMP \u5b9e\u73b0\u53bb\u4fe1\u4efb\u4f20\u9012\u6d88\u606f\uff0cSPREE \u662f XCMP \u6548\u7528\u7684\u5173\u952e\u90e8\u5206\u3002"),(0,o.kt)("p",null,'SPREE \u6a21\u5757\u5c31\u50cf\u98df\u8c31\u3002 \u4f8b\u5982\u5982\u679c\u6211\u4eec\u5411\u53a8\u5e08\u4e0b\u4ee4\u5236\u4f5c\u8212\u8299\u857e\uff0c\u5bf9\u53a8\u5e08\u7684\u80fd\u529b\u975e\u5e38\u6709\u4fe1\u5fc3\uff0c\u6211\u4eec\u5bf9\u5c06\u8981\u505a\u7684\u4e8b\u60c5\u6709\u6a21\u7cca\u7684\u60f3\u6cd5\uff0c\u4f46\u5b9e\u9645\u4e0a\u5e76\u4e0d\u786e\u5b9a\u5982\u4f55\u505a\u3002 \u4f46\u662f\u5047\u8bbe\u67d0\u4f4d\u53a8\u5e08\u7684\u4e66\u67b6\u4e0a\u6709 "Souffl\xe9Maker\'s \u624b\u518c"\uff0c\u81ea\u5df1\u53ea\u80fd\u4ece\u8fd9\u672c\u4e66\u5236\u4f5c\u8212\u8299\u857e\u3002 \u73b0\u5728\u6211\u4eec\u8fd8\u53ef\u4ee5\u67e5\u9605\u53a8\u5e08\u6240\u62e5\u6709\u7684\u4e00\u672c\u4e66\uff0c\u4e86\u89e3\u5f53\u6211\u4eec\u544a\u8bc9\u53a8\u5e08\u505a\u8212\u8299\u857e\u65f6\u4f1a\u53d1\u751f\u4ec0\u4e48\u3002 \u5728\u6b64\u793a\u4f8b\u4e2d" \u5236\u4f5c\u8212\u8299\u857e" \u662f XCMP \u7684\u4fe1\u606f\u800c\u83dc\u8c31\u662f SPREE \u6a21\u5757\u3002'),(0,o.kt)("p",null,"In concrete terms, SPREE modules could be useful for various functionality on Polkadot. One suggested use case of SPREE modules is for a trustless decentralized exchange that is offered as functionality to any parachain without any extra effort from parachain developers. One can imagine this working by having a SPREE module that exposes the interface for the incrementing and decrementing of balances of various assets based on a unique identifier."),(0,o.kt)("h2",{id:"\u4e3a\u4ec0\u4e48"},"\u4e3a\u4ec0\u4e48?"),(0,o.kt)("p",null,"Sending messages across parachains in XCMP only ensures that the message will be delivered but does not specify the code that will be executed, or how the message will be interpreted by the receiving parachain. There would be ways around this such as requesting a verifiable receipt of the execution from the receiving parachain, but in the naked case the other parachain would have to be trusted. Having shared code that exists in appendices that the parachain can opt-in to resolves the need for trust and makes the execution of the appendices completely trustless."),(0,o.kt)("p",null,"SPREE \u5c06\u6709\u52a9\u4e8e\u786e\u4fdd\u5728 SPREE \u6a21\u5757\u5e73\u884c\u94fe\u4e4b\u95f4\u5171\u4eab\u76f8\u540c\u7684\u903b\u8f91\u3002\u4e00\u4e2a\u7279\u522b\u76f8\u5173\u7684\u7528\u4f8b\u5c06\u56f4\u7ed5\u8de8\u5e73\u884c\u94fe\u4ee3\u5e01\u8f6c\u79fb\uff0c\u5728\u53d1\u9001\u548c\u63a5\u6536\u5e73\u884c\u94fe\u5c31\u5982\u4f55\u66f4\u6539\u4ee3\u5e01\u7684\u603b\u4f9b\u5e94\u91cf\u548c\u57fa\u672c\u63a5\u53e3\u8fbe\u6210\u4e00\u81f4\u975e\u5e38\u91cd\u8981\u3002"),(0,o.kt)("h2",{id:"\u4f8b\u5b50"},"\u4f8b\u5b50"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"spree example",src:a(19486).Z})),(0,o.kt)("p",null,"\u4e0a\u56fe\u662f\u7b80\u5316 Polkadot \u7684\u7cfb\u7edf\u3002"),(0,o.kt)("p",null,'In this diagram we see that the Wasm code for SPREE module "X" has been uploaded to the Polkadot Relay Chain. The two cylinders "A" and "B" represent two distinct parachains that have both opted-in to this SPREE module creating two distinct instances of it with their own XCMP endpoints "A.X" and "B.X".'),(0,o.kt)("p",null,'\u5728\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u5047\u8bbe\u6b64 SPREE \u6a21\u5757 "X" \u5305\u542b\u7528\u4e8e\u9012\u589e\u6216\u9012\u51cf\u8be5\u6a21\u5757\u7279\u5b9a\u8d44\u4ea7\u7684\u4f59\u989d\u3002'),(0,o.kt)("p",null,"\u901a\u8fc7\u5728 A.X \u5904\u53d1\u8d77\u4ea4\u6613\u4ee5\u5c06\u7279\u5b9a\u4f59\u989d\u51cf\u5c111\uff0cXCMP\u4e0a\u7684\u6d88\u606f\u53ef\u4ee5\u53bb\u4fe1\u4efb\u53d1\u9001\u5230 B.X \u4ee5\u4f7f\u4f59\u989d\u589e\u52a01\u3002"),(0,o.kt)("p",null,"Collators, represented as the green triangle are responsible for relaying this message from parachain A to parachain B, as well as mantaining the storage for each particular instance of A.X and B.X for their respective parachains. They provide proofs of valid state transitions to the Relay Chain validators, represented as blue diamonds."),(0,o.kt)("p",null,"\u9a8c\u8bc1\u4eba\u53ef\u4ee5\u901a\u8fc7\u63d0\u4f9b\u4e4b\u524d\u7684 SPREE \u6a21\u5757\u5b9e\u4f8b\u7684\u72b6\u6001\u6839\u548c\u5b9e\u4f8b\u4e4b\u95f4\u7684 XCMP \u6d88\u606f\u7684\u6570\u636e\u4ee5\u53ca\u5b9e\u4f8b\u7684\u4e0b\u4e00\u4e2a\u72b6\u6001\u6839\u53bb\u9a8c\u8bc1 SPREE \u6a21\u5757\u7684 A.X \u548c B.X \u6b63\u786e\u72b6\u6001\u8f6c\u6362\u3002\u5b83\u4eec\u6267\u884c\u6b64\u9a8c\u8bc1\u662f\u5bf9\u7167 SPREE \u6a21\u5757\u63d0\u4f9b\u7684",(0,o.kt)("inlineCode",{parentName:"p"},"\u9a8c\u8bc1"),"\u51fd\u6570\u5bf9\u5176\u8fdb\u884c\u68c0\u67e5 API\u3002\u6536\u96c6\u4eba\u662f\u9700\u8981\u80fd\u591f\u63d0\u4f9b\u6b64\u4fe1\u606f\uff0c\u4ee5\u4fbf\u5904\u7406\u5176\u5e73\u884c\u94fe\u3002"))}d.isMDXComponent=!0},19486:(e,t,a)=>{"use strict";a.d(t,{Z:()=>r});const r=a.p+"assets/images/spree_module-a8eefaaf0abf97f465af31069d8856ff.png"}}]);